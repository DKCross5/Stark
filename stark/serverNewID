import asyncio
import websockets
import uuid
import json 

clients = {}
async def get_names():
    return list(clients.items())

async def retrieve_names():
    await asyncio.sleep(10) 
    names = await get_names()
    print("connected clients:", names)
async def get_ID(websocket):
    
    client_id_key = str(uuid.uuid4())
    try:
        print(f"Client {client_id_key} connected")
        Identity = await websocket.recv()
        print(f"Recieved from client: {Identity}")
        response = json.dumps({"Status:":"Success"})
        await websocket.send(response)
        clients[Identity+'-'+ client_id_key] = websocket
    except websockets.ConnectionClosed:
        print(f"Client {client_id_key} disconnected")
    # try:
    #     async for name in websocket:
    #         print(f"Received message from {client_id_key}: {name}")
    #         await websocket.send(f"Hello: {name}")
    #         clients[name+'-'+ client_id_key] = websocket
    # except websockets.ConnectionClosed:
    #     print(f"Client {client_id_key} disconnected") 
   
async def gather_position(websocket):
    try:
        async for data in websocket:
            print(data)
            await websocket.send(f"you are at {data}, correct?")
    except websockets.ConcurrencyError:
        print(f'Error: Communication')
async def main():
    server = await websockets.serve(get_ID, "localhost", 8765)
    asyncio.create_task(retrieve_names())
    await server.serve_forever()
    
if __name__ == "__main__":
    asyncio.run(main())
